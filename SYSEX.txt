Sysex LUMI commands look like:
F0 <manufacturer> 77 <device-id> <command> <checksum> F7

The checksum is computed for the 8 bytes of the command with the following algorithm:

checksum(bytes, size):
  c = size
  for b in bytes:
    c = (c * 3 + b) & 0xff 
  return c & 0x7f

# manufacturer: ROLI
00 21 10

# prefix
00 21 10 77 <device-id> (37 for LUMI, 00 for all blocks?)

# list blocks? (on device 00)
01 01 00

# battery level?
01 03 00

# get product serial
# see https://github.com/WeAreROLI/JUCE/blob/724ae27c71ef809b836df06713cf9e50bc14162b/modules/juce_blocks_basics/topology/internal/juce_BlockSerialReader.cpp
78 

# https://github.com/WeAreROLI/JUCE/blob/bcaa8cbdde40e47654e1a558659fe5ede5ffc7d8/modules/juce_blocks_basics/protocol/juce_BlocksProtocolDefinitions.h
# first byte is message type:
    deviceCommandMessage    = 0x01,
    sharedDataChange        = 0x02,
    programEventMessage     = 0x03,
    firmwareUpdatePacket    = 0x04,

    configMessage           = 0x10,
    factoryReset            = 0x11,
    blockReset              = 0x12,

    setName                 = 0x20

# for deviceCommandMessage:
    beginAPIMode                = 0x00,
    requestTopologyMessage      = 0x01,
    endAPIMode                  = 0x02,
    ping                        = 0x03,
    debugMode                   = 0x04,
    saveProgramAsDefault        = 0x05

# for configMessage:
    setConfig                   = 0x00,
    requestConfig               = 0x01, // Request a config update
    requestFactorySync          = 0x02, // Requests all active factory config data
    requestUserSync             = 0x03, // Requests all active user config data
    updateConfig                = 0x04, // Set value, min and max
    updateUserConfig            = 0x05, // As above but contains user config metadata
    setConfigState              = 0x06, // Set config activation state and whether it is saved in flash
    factorySyncEnd              = 0x07,
    clusterConfigSync           = 0x08,
    factorySyncReset            = 0x09

# change color 1 (global key color)
10 20 [color] 03
# change color 2
10 30 [color] 03 (root key color)

# examples of color changes
10 20 64 3F 00 00 7E 03 // blue
10 20 04 40 7F 00 7E 03 // green
10 20 04 00 00 7F 7F 03 // red
10 20 04 40 7F 7F 7F 03 // yellow
10 20 64 3F 00 7F 7F 03 // magenta
10 20 64 7F 7F 00 7E 03 // cyan

# bit encoding of colors:
# 00100 _ 8 bits of blue _ 8 bits of green _ 8 bits of red _ 111111
blue    1100100 0111111 0000000 0000000 1111110
green   0000100 1000000 1111111 0000000 1111110
red     0000100 0000000 0000000 1111111 1111111
yellow  0000100 1000000 1111111 1111111 1111111
magenta 1100100 0111111 0000000 1111111 1111111
cyan    1100100 1111111 1111111 0000000 1111110

# for rgb value, generate 5 values:
v1 = ((b & 0x3) << 5) | 0x4,
v2 = ((b >> 2) & 0x3f) | (g & 1),
v3 = g >> 1,
v4 = r & 0x7f,
v5 = (r >> 7) | 0x7e,

TODO: 03 is probably the last two bits of an 8-bit value (brightness?)
TODO: 00100 is probably an identifier for the changed color

# brightness
10 40 04 00 00 00 00 00 // 0%
10 40 24 06 00 00 00 00 // 25%
10 40 44 0C 00 00 00 00 // 50%
10 40 64 12 00 00 00 00 // 75%
10 40 04 19 00 00 00 00 // 100%

# channel
10 00 20 00 00 00 00 00 // 1
10 00 40 00 00 00 00 00 // 2
10 00 60 00 00 00 00 00 // 3
10 00 00 01 00 00 00 00 // 4
10 00 20 01 00 00 00 00 // 5
10 00 40 01 00 00 00 00 // 6
10 00 60 01 00 00 00 00 // 7
10 00 00 02 00 00 00 00 // 8
10 00 20 02 00 00 00 00 // 9
10 00 40 02 00 00 00 00 // 10
10 00 60 02 00 00 00 00 // 11

# octave
10 40 00 7F 7F 7F 7F 03 // -4
10 40 20 7F 7F 7F 7F 03 // -3
10 40 40 7F 7F 7F 7F 03 // -2
10 40 60 7F 7F 7F 7F 03 // -1
10 40 00 00 00 00 00 00 // 0
10 40 20 00 00 00 00 00 // 1
10 40 40 00 00 00 00 00 // 2
10 40 60 01 00 00 00 00 // 3
10 40 00 01 00 00 00 00 // 4
10 40 20 01 00 00 00 00 // 5

# transpose
10 50 60 7F 7F 7F 7F 03 // -1
10 50 00 00 00 00 00 00 // 0
10 50 20 00 00 00 00 00 // 1
10 50 40 00 00 00 00 00 // 2
10 50 60 00 00 00 00 00 // 3
10 50 00 01 00 00 00 00 // 4
10 50 20 01 00 00 00 00 // 5
10 50 40 01 00 00 00 00 // 6
10 50 60 01 00 00 00 00 // 7
10 50 00 02 00 00 00 00 // 8
10 50 20 02 00 00 00 00 // 9
10 50 40 02 00 00 00 00 // 10
10 50 60 02 00 00 00 00 // 11

# strike sensitivity
10 20 01 06 00 00 00 00 // low
10 20 41 1B 00 00 00 00 // high
10 20 01 00 00 00 00 00 // min
10 20 61 1F 00 00 00 00 // max

# sensitivity
10 50 01 19 00 00 00 00 // high
10 50 01 05 00 00 00 00 // low
10 50 01 00 00 00 00 00 // min
10 50 61 1F 00 00 00 00 // max

# fixed velocity
10 70 21 00 00 00 00 00 // on
10 70 01 00 00 00 00 00 // off

# fixed velocity value
10 00 62 1E 00 00 00 00 // 123
10 00 62 1F 00 00 00 00 // 127

# color mode
10 40 02 00 00 00 00 00 // rainbow
10 40 22 00 00 00 00 00 // single color scale
10 40 42 00 00 00 00 00 // piano
10 40 62 00 00 00 00 00 // night

# scale
10 60 02 00 00 00 00 00 // major
10 60 22 00 00 00 00 00 // minor
10 60 42 00 00 00 00 00 // harmonic minor
10 60 42 04 00 00 00 00 // chromatic
10 60 62 00 00 00 00 00 // pentatonic neutral
10 60 02 01 00 00 00 00 // pentatonic major
10 60 22 01 00 00 00 00 // pentatonic minor
10 60 42 01 00 00 00 00 // blues
10 60 62 01 00 00 00 00 // dorian
10 60 02 02 00 00 00 00 // phrygian
10 60 22 02 00 00 00 00 // lydian
10 60 42 02 00 00 00 00 // mixolydian
10 60 62 02 00 00 00 00 // locrian
10 60 02 03 00 00 00 00 // whole tone
10 60 22 02 00 00 00 00 // arabic (a)
10 60 42 03 00 00 00 00 // arabic (b)
10 60 62 03 00 00 00 00 // japanese
10 60 02 04 00 00 00 00 // ryukyu
10 60 22 04 00 00 00 00 // 8-tone spanish
10 60 42 04 00 00 00 00 // chromatic

# brightness
10 40 04 19 00 00 00 00 // 100%

# key
10 30 03 00 00 00 00 00 // C
10 30 23 00 00 00 00 00 // C#
10 30 43 00 00 00 00 00 // D
10 30 63 00 00 00 00 00 // D#
10 30 23 01 00 00 00 00 // F
10 30 63 02 00 00 00 00 // B

# pressure tracking mode
10 00 04 00 00 00 00 00 // poly aftertouch 
10 00 24 00 00 00 00 00 // channel pressure

